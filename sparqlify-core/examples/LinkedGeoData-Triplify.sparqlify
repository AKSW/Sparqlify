/**
 * Sparqlify configuration file for LinkedGeoData
 *
 * Triplify flavour
 *
 */

// Prefixes (these will also be used in the query responses)
Prefix spy:<http://aksw.org/sparqlify/>
Prefix ogc:<http://www.opengis.net/rdf#>

Prefix dc:<http://purl.org/dc/elements/1.1/>
Prefix xsd:<http://www.w3.org/2001/XMLSchema#>
Prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
Prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>
Prefix owl:<http://www.w3.org/2002/07/owl#>


Prefix lgd:<http://linkedgeodata.org/triplify/>
Prefix lgd-geom:<http://linkedgeodata.org/geometry/>
Prefix lgdo:<http://linkedgeodata.org/ontology/>
Prefix lgdm:<http://linkedgeodata.org/meta/>

//Prefix geo:<http://www.georss.org/georss/>

Prefix wgs: <http://www.w3.org/2003/01/geo/wgs84_pos#>


Prefix spatial:<http://geovocab.org/spatial#>
Prefix geom:<http://geovocab.org/geometry#>

//Prefix virtrdf:<http://www.openlinksw.com/schemas/virtrdf#>


/**********
 * Ontology
 **********/


Create View classes_k As
    Construct {
        ?s a owl:Class .
        ?s lgdm:sourceKey ?k .
    }
    With
        ?s = spy:uri(?object)
        ?k = spy:plainLiteral(?k)
    Constrain
        ?s prefix "http://linkedgeodata.org/ontology/"
    From
        [[SELECT object, k FROM lgd_map_resource_k WHERE property = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type']];

Create View sub_classes As
    Construct {
        ?child rdfs:subClassOf ?parent .
    }
    With
        ?child  = spy:uri(?child) 
        ?parent = spy:uri(?parent) 
    Constrain
        ?child  prefix "http://linkedgeodata.org/ontology/"
        ?parent prefix "http://linkedgeodata.org/ontology/"
    From
        [[SELECT a.object AS parent, b.object AS child FROM lgd_map_resource_k a JOIN lgd_map_resource_kv b ON (b.k = a.k) WHERE a.property = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' AND b.property = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' AND a.object != b.object]];


Create View classes_kv As
    Construct {
        ?s a owl:Class .
        ?s lgdm:sourceTag ?t .
        ?t lgdm:key ?k .
        ?t lgdm:value ?v .
    }
    With
        ?s = spy:uri(?object)
        ?t = spy:uri(concat(?object, "/key/", ?k, "/value/", ?v))
        ?k = spy:plainLiteral(?k)
        ?v = spy:plainLiteral(?v)
    Constrain
        ?s prefix "http://linkedgeodata.org/ontology/"
        ?t prefix "http://linkedgeodata.org/ontology/"
    From
        [[SELECT object, k, v FROM lgd_map_resource_kv WHERE property = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type']];



// Resource labels
Create View view_resource_labels As
	Construct {
		?s rdfs:label ?o .
	}
	With
		?s = spy:uri(?resource)
		?o = spy:plainLiteral(?label, ?language)
	Constrain
		?s prefix "http://linkedgeodata.org/ontology/"
	From
		lgd_resource_label;



/*************
 * Nodes
 *************/


// Node geometries
Create View lgd_nodes As
	Construct {
	    ?n a lgdo:Node .
	    ?n a spatial:Feature .
	    ?n lgdo:version ?v .
	    ?n dc:contributor ?u .
		?n dc:modified ?d .
		?n lgdo:changeset ?c .
		?n geom:geometry ?g .
		?n wgs:long ?xx .
		?n wgs:lat ?yy .
	}
	With
		?n = spy:uri(concat(lgd:node, ?id))
		?v = spy:typedLiteral(?version, xsd:int)
		?u = spy:uri(concat(lgdo:user, ?user_id))
		?d = spy:typedLiteral(?tstamp, xsd:dateTime)
		?c = spy:typedLiteral(?changeset_id, xsd:int)
		?g = spy:uri(concat(lgd-geom:node, ?id))
		//?g = spy:typedLiteral(?geom, virtrdf:geometry)
		?xx = spy:typedLiteral(?x, xsd:double)
		?yy = spy:typedLiteral(?y, xsd:double)
	From
		[[SELECT *, ST_X(geom::geometry) x, ST_Y(geom::geometry) y FROM nodes]];


Create view lgd_sameAs_gadm As
    Construct {		
		?n owl:sameAs ?gadm .
    }
    With
    	?n = spy:uri(concat(lgd:node, ?id))
		?gadm = spy:uri(concat("http://gadm.geovocab.org/services/withinRegion?lat=", ?y , "&long=", ?x, "#point"))
	From
		[[SELECT id, ST_X(geom::geometry)::float4::text x, ST_Y(geom::geometry)::float4::text y FROM nodes]];

Create View lgd_node_geometries As
    Construct {
        ?n a geom:Geometry .
        ?n ogc:asWKT ?o .
    }
    With
        ?n = spy:uri(concat(lgd-geom:node, ?id)) 
        ?o = spy:typedLiteral(?geom, ogc:WKTLiteral)
    From
        nodes;


Create View lgd_node_tags_resource_k As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?osm_entity_id)) 
		?p = spy:uri(?property)
		?o = spy:uri(?object)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/"
		?o prefix "http://linkedgeodata.org/ontology/"
	From
		[[SELECT * FROM lgd_tags_resource_k WHERE osm_entity_type = 'node']];

Create View lgd_node_tags_resource_kv As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?osm_entity_id))
		?p = spy:uri(?property)
		?o = spy:uri(?object)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/"	
		?o prefix "http://linkedgeodata.org/ontology/"	
	From
		[[SELECT * FROM lgd_tags_resource_kv WHERE osm_entity_type = 'node']];

Create View lgd_node_tags_boolean As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:boolean)
	From
		[[SELECT * FROM lgd_tags_boolean WHERE osm_entity_type = 'node']];

Create View lgd_node_tags_int As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?osm_entity_id))
		//?p = spy:uri(concat('http://linkedgeodata.org/ontology/', spy:urlEncode(?k)))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:int)
	From
		[[SELECT * FROM lgd_tags_int WHERE osm_entity_type = 'node']];

Create View lgd_node_tags_float As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:float)
	From
		[[SELECT * FROM lgd_tags_float WHERE osm_entity_type = 'node']];

Create View lgd_node_tags_text As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?osm_entity_id)) 
		?p = spy:uri(?property)
		?o = spy:plainLiteral(?v, ?language)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/" "http://xmlns.com/foaf/0.1/"
	From
		[[SELECT * FROM lgd_tags_text WHERE osm_entity_type = 'node']];

Create View lgd_node_tags_string As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', spy:urlEncode(?k)))
		?o = spy:plainLiteral(?v)
	From
		[[SELECT * FROM lgd_tags_string WHERE osm_entity_type = 'node']];



/*************
 * Ways
 *************/
 
Create View lgd_ways As
	Construct {
	    ?w a lgdo:Way .
	    ?w a spatial:Feature .
	    ?w lgdo:version ?v .
	    ?w dc:contributor ?u .
		?w dc:modified ?d .
		?w lgdo:changeset ?c .
		?w geom:geometry ?g .
	}
	With
		?w = spy:uri(concat(lgd:way, ?id))
		?v = spy:typedLiteral(?version, xsd:int)
		?u = spy:uri(concat(lgdo:user, ?user_id))
		?d = spy:typedLiteral(?tstamp, xsd:dateTime)
		?c = spy:typedLiteral(?changeset_id, xsd:int)
		//?g = spy:typedLiteral(?geom, virtrdf:geometry)
		?g = spy:uri(concat(lgd-geom:way, ?id))
	From
		ways; 


/*
Create View view_way_to_nodes As
	Construct {
		?w lgdo:hasNodes ?wn .
	}
	With 
		?w = spy:uri(concat(lgd:way, ?id))
		?wn = spy:uri(concat(lgd:waynode, ?id))  
	From
		ways;
*/


Create View lgd_pos_seq As
	Construct {
		?w lgdo:posSeq ?wn .
	}
	With 
		?w = spy:uri(concat(lgd-geom:way, ?id))
		?wn = spy:uri(concat(lgd-geom:posSeq, ?id))  
	From
		ways;

Create View lgd_pos_seq_type As
	Construct {
	    ?wn a rdf:Seq . 
	}
	With
		?wn = spy:uri(concat(lgd-geom:posSeq, ?id))
	From
		ways;

  
Create View view_waynodes As
	Construct {
		?wn ?p ?n .
	}
	With
		?wn = spy:uri(concat(lgd-geom:posSeq, ?way_id))
		?p = spy:uri(concat(rdf:_, ?sequence_id))
		?n = spy:uri(concat(lgd-geom:node, ?node_id))  
	From
		way_nodes;


Create View lgd_ways_linestrings As
    Construct {
        ?w a geom:Geometry . 
        ?w ogc:asWKT ?g .
    }
    With
		//?w = spy:uri(concat(lgd:way, ?id))
		?w = spy:uri(concat(lgd-geom:way, ?id))
		?g = spy:typedLiteral(?linestring, ogc:WKTLiteral)
	From
		[[SELECT id, linestring FROM ways a WHERE NOT EXISTS (SELECT way_id FROM simple_polys b WHERE b.way_id = a.id)]];
    

Create View ways_polygons As
	Construct {
	    ?w a geom:Geometry .
		?w ogc:asWKT ?g .
	}
	With
		//?w = spy:uri(concat(lgd:way, ?way_id))
		?w = spy:uri(concat(lgd-geom:way, ?way_id))
		?g = spy:typedLiteral(?polygon, ogc:WKTLiteral)
	From
		simple_polys;
	


Create View lgd_way_tags_resource_k As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id)) 
		?p = spy:uri(?property)
		?o = spy:uri(?object)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/"
		?o prefix "http://linkedgeodata.org/ontology/"
	From
		[[SELECT * FROM lgd_tags_resource_k WHERE osm_entity_type = 'way']];

Create View lgd_way_tags_resource_kv As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id))
		?p = spy:uri(?property)
		?o = spy:uri(?object)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/"	
		?o prefix "http://linkedgeodata.org/ontology/"	
	From
		[[SELECT * FROM lgd_tags_resource_kv WHERE osm_entity_type = 'way']];

Create View lgd_way_tags_boolean As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:boolean)
	From
		[[SELECT * FROM lgd_tags_boolean WHERE osm_entity_type = 'way']];

Create View lgd_way_tags_int As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id))
		//?p = spy:uri(concat('http://linkedgeodata.org/ontology/', spy:urlEncode(?k)))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:int)
	From
		[[SELECT * FROM lgd_tags_int WHERE osm_entity_type = 'way']];

Create View lgd_way_tags_float As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:float)
	From
		[[SELECT * FROM lgd_tags_float WHERE osm_entity_type = 'way']];

Create View lgd_way_tags_text As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id)) 
		?p = spy:uri(?property)
		?o = spy:plainLiteral(?v, ?language)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/" "http://xmlns.com/foaf/0.1/"
	From
		[[SELECT * FROM lgd_tags_text WHERE osm_entity_type = 'way']];

Create View lgd_way_tags_string As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', spy:urlEncode(?k)))
		?o = spy:plainLiteral(?v)
	From
		[[SELECT * FROM lgd_tags_string WHERE osm_entity_type = 'way']];





/*********
 * RELATIONS
 *********/ 

Create View lgd_relations As
	Construct {
	    ?s a lgdo:Relation .
	    ?s a spatial:Feature .
	    ?s lgdo:version ?v .
	    ?s dc:contributor ?u .
		?s dc:modified ?d .
		?s lgdo:changeset ?c .
		//?w geom:geometry ?g .
		
		?s lgdo:members ?m .
		?m a rdf:Seq .
		
	}
	With
		?s = spy:uri(concat(lgd:relation, ?id))
		?v = spy:typedLiteral(?version, xsd:int)
		?u = spy:uri(concat(lgdo:user, ?user_id))
		?d = spy:typedLiteral(?tstamp, xsd:dateTime)
		?c = spy:typedLiteral(?changeset_id, xsd:int)
		//?g = spy:uri(concat(lgd-geom:relation, ?id))
		
		?m = spy:uri(concat(lgd:relation, ?id, "/members"))  
		
	From
		[[SELECT id, version, user_id, tstamp, changeset_id FROM relations]]; 

  
Create View lgd_relation_members_seq_nodes As
	Construct {
		?m ?p ?i .
		?i lgdo:role ?r .
		?i lgdo:ref  ?n
	}
	With
		?m = spy:uri(concat(lgd:relation, ?relation_id, "/members"))  
		?p = spy:uri(concat(rdf:_, ?sequence_id))
		?i = spy:uri(concat(lgd:relation, ?relation_id, "/member", ?sequence_id))
		?r = spy:plainLiteral(?member_role)  
		?n = spy:uri(concat(lgd:node, ?member_id))
	From
		[[SELECT * FROM relation_members WHERE member_type = 'N']];

Create View lgd_relation_members_seq_ways As
	Construct {
		?m ?p ?i .
		?i lgdo:role ?r .
		?i lgdo:ref  ?n
	}
	With
		?m = spy:uri(concat(lgd:relation, ?relation_id, "/members"))  
		?p = spy:uri(concat(rdf:_, ?sequence_id))
		?i = spy:uri(concat(lgd:relation, ?relation_id, "/member", ?sequence_id))
		?r = spy:plainLiteral(?member_role)  
		?n = spy:uri(concat(lgd:way, ?member_id))
	From
		[[SELECT * FROM relation_members WHERE member_type = 'W']];


Create View lgd_relation_members_seq_relations As
	Construct {
		?m ?p ?i .
		?i lgdo:role ?r .
		?i lgdo:ref  ?n
	}
	With
		?m = spy:uri(concat(lgd:relation, ?relation_id, "/members"))  
		?p = spy:uri(concat(rdf:_, ?sequence_id))
		?i = spy:uri(concat(lgd:relation, ?relation_id, "/member", ?sequence_id))
		?r = spy:plainLiteral(?member_role)  
		?n = spy:uri(concat(lgd:relation, ?member_id))
	From
		[[SELECT * FROM relation_members WHERE member_type = 'R']];


/*
Create View relation_members_nodes As
	Construct {
		?s lgdo:hasMember ?o .
	}
	With
		?s = spy:uri(concat(lgd:relation, ?relation_id)) 
		?o = spy:uri(concat(lgd:node, ?member_id))
	From
		[[SELECT relation_id, member_id FROM relation_members WHERE member_type = 'N']];
*/





Create View lgd_relation_tags_resource_k As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:relation, ?osm_entity_id)) 
		?p = spy:uri(?property)
		?o = spy:uri(?object)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/"
		?o prefix "http://linkedgeodata.org/ontology/"
	From
		[[SELECT * FROM lgd_tags_resource_k WHERE osm_entity_type = 'relation']];

Create View lgd_relation_tags_resource_kv As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:relation, ?osm_entity_id))
		?p = spy:uri(?property)
		?o = spy:uri(?object)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/"	
		?o prefix "http://linkedgeodata.org/ontology/"	
	From
		[[SELECT * FROM lgd_tags_resource_kv WHERE osm_entity_type = 'relation']];

Create View lgd_relation_tags_boolean As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:relation, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:boolean)
	From
		[[SELECT * FROM lgd_tags_boolean WHERE osm_entity_type = 'relation']];

Create View lgd_relation_tags_int As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:relation, ?osm_entity_id))
		//?p = spy:uri(concat('http://linkedgeodata.org/ontology/', spy:urlEncode(?k)))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:int)
	From
		[[SELECT * FROM lgd_tags_int WHERE osm_entity_type = 'relation']];

Create View lgd_relation_tags_float As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:relation, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', ?k))
		?o = spy:typedLiteral(?v, xsd:float)
	From
		[[SELECT * FROM lgd_tags_float WHERE osm_entity_type = 'relation']];

Create View lgd_relation_tags_text As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:way, ?osm_entity_id)) 
		?p = spy:uri(?property)
		?o = spy:plainLiteral(?v, ?language)
	Constrain
		?p prefix "http://linkedgeodata.org/ontology/" "http://www.w3.org/" "http://xmlns.com/foaf/0.1/"
	From
		[[SELECT * FROM lgd_tags_text WHERE osm_entity_type = 'relation']];

Create View lgd_relation_tags_string As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:relation, ?osm_entity_id))
		?p = spy:uri(concat('http://linkedgeodata.org/ontology/', spy:urlEncode(?k)))
		?o = spy:plainLiteral(?v)
	From
		[[SELECT * FROM lgd_tags_string WHERE osm_entity_type = 'relation']];



/*

// Classes and object properties (generic)
Create View view_prefixed_properties As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?node_id))
		?p = spy:uri(?property)
		?o = spy:uri(?object)
	From
		node_generic_resources;




// Object Properties with prefix
// The prefix datatype causes troubles
Create View view_prefixed_properties As
	Construct {
		?s ?p ?o .
	}
	With
		?s = spy:uri(concat(lgd:node, ?node_id))
		?p = spy:uri(?property)
		?o = spy:uri(concat(?object_prefix, ?v))
	From
		lgd_node_tags_prefix;

*/


		
/**
 * Copyright (C) 2009-2012, LinkedGeoData team at the MOLE research
 * group at AKSW / University of Leipzig
 *
 * This file is part of LinkedGeoData.
 *
 * LinkedGeoData is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * LinkedGeoData is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
 

